name: Build and Deploy Python App to EC2

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: conductor/backend
      EC2_INSTANCE_ID: i-04ef88b4a2bf4f801

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::867344440197:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 via SSM
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          COMMANDS_JSON=$(cat <<EOF
          {
            "commands": [
              "#!/bin/bash",
              "set -eo pipefail",
              "echo '--- Logging into ECR ---'",
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "echo '--- Cleaning up old containers and network ---'",
              "docker stop flask_server conductor_server || true",
              "docker rm flask_server conductor_server || true",
              "docker network rm app-network || true",
              "sleep 2",
              "echo '--- Creating Docker network ---'",
              "docker network create app-network",
              "echo '--- Pulling new images ---'",
              "docker pull orkesio/orkes-conductor-community",
              "docker pull ${{ env.IMAGE_URI }}",
              "echo '--- Starting Conductor server ---'",
              "docker run -d --name conductor_server --network app-network -p 8080:8080 -p 5000:5000 -e DB=postgres --restart always orkesio/orkes-conductor-community",
              "echo '--- Waiting for Conductor to be ready ---'",
              "timeout 300 bash -c 'until docker exec conductor_server curl -f http://localhost:8080/health > /dev/null 2>&1; do echo \"Waiting for Conductor...\"; sleep 5; done' || echo \"Conductor health check timeout - continuing anyway\"",
              "echo '--- Starting Flask server with environment variables ---'",
              "docker run -d --name flask_server --network app-network -p 3000:3000 -e CONDUCTOR_URL=https://conductor-server.enowclear360.com/api -e BP_CLIENT_ID=E2K1g5kpTTMzbSB32PGWKFXfdtxWR1j5 -e BP_CLIENT_SECRET=zbPQpXD1TpGifYgV5r9vimcR -e BP_API_KEY=LCLSzoQf8R3zPtj2ZvQR19JkLYtDHREV2jpgMH4g --restart always ${{ env.IMAGE_URI }}",
              "echo '--- Verifying deployment ---'",
              "sleep 10",
              "docker ps --format \"table {{.Names}}\\t{{.Status}}\\t{{.Ports}}\"",
              "echo '--- Checking Flask server environment ---'",
              "docker exec flask_server env | grep -E '(CONDUCTOR_URL|BP_)'",
              "echo '--- Deployment finished successfully ---'"
            ]
          }
          EOF
          )
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying commit: ${{ github.sha }}" \
            --targets "Key=InstanceIds,Values=${EC2_INSTANCE_ID}" \
            --parameters "$COMMANDS_JSON" \
            --region $AWS_REGION \
            --query "Command.CommandId" \
            --output text)
          echo "Waiting for deployment to complete..."
          while true; do
            STATUS=$(aws ssm list-command-invocations \
              --command-id "$COMMAND_ID" \
              --region $AWS_REGION \
              --query 'CommandInvocations[0].Status' \
              --output text)
            echo "Current status: $STATUS"
            if [ "$STATUS" = "Success" ]; then
              echo "✅ Deployment completed successfully!"
              break
            elif [ "$STATUS" = "Failed" ] || [ "$STATUS" = "Cancelled" ] || [ "$STATUS" = "TimedOut" ]; then
              echo "❌ Deployment failed with status: $STATUS"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "${EC2_INSTANCE_ID}" \
                --query "StandardErrorContent" \
                --output text
              exit 1
            fi
            sleep 10
          done
