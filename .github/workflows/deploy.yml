name: Build and Deploy Python App to EC2

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: conductor/backend
      EC2_INSTANCE_ID: i-04ef88b4a2bf4f801

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::867344440197:role/GitHubActionsRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-Deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy to EC2 via SSM Run Command
        env:
          IMAGE_URI: ${{ steps.build-image.outputs.image }}
        run: |
          # Use a heredoc to create a clean JSON payload for the commands.
          # This is the most reliable way to pass multi-line scripts to SSM.
          COMMANDS_JSON=$(cat <<EOF
          {
            "commands": [
              "#!/bin/bash",
              "set -e",
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "docker network create app-network || true",
              "docker stop flask_server || true",
              "docker rm flask_server || true",
              "docker stop conductor_server || true",
              "docker rm conductor_server || true",
              "docker pull ${{ env.IMAGE_URI }}",
              "docker run -d --name conductor_server --network app-network -p 8080:8080 -p 5000:5000 --restart always orkesio/orkes-conductor-community",
              "docker run -d --name flask_server --network app-network -p 80:80 --restart always ${{ env.IMAGE_URI }}"
            ]
          }
          EOF
          )

          # Send the command with the cleanly formatted JSON payload
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying commit: ${{ github.short_sha }}" \
            --targets "Key=InstanceIds,Values=${EC2_INSTANCE_ID}" \
            --parameters "$COMMANDS_JSON" \
            --region ${{ env.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)

          # Wait for the command to complete
          echo "Waiting for deployment to complete..."
          aws ssm wait command-executed --command-id "$COMMAND_ID" --instance-id "${EC2_INSTANCE_ID}" --region ${{ env.AWS_REGION }}
          
          # Check the final status and output
          STATUS=$(aws ssm list-command-invocations --command-id "$COMMAND_ID" --details --query "CommandInvocations[0].Status" --output text)
          if [ "\$STATUS" = "Success" ]; then
            echo "✅ Deployment completed successfully!"
          else
            echo "❌ Deployment failed with status: \$STATUS"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${EC2_INSTANCE_ID}" \
              --query "StandardErrorContent" \
              --output text
            exit 1
          fi
